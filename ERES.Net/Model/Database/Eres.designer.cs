#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERES.Net.Model.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Eres")]
	public partial class EresDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertGradeValue(GradeValue instance);
    partial void UpdateGradeValue(GradeValue instance);
    partial void DeleteGradeValue(GradeValue instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertRealisation(Realisation instance);
    partial void UpdateRealisation(Realisation instance);
    partial void DeleteRealisation(Realisation instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertSemester(Semester instance);
    partial void UpdateSemester(Semester instance);
    partial void DeleteSemester(Semester instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    #endregion
		
		public EresDataContext() : 
				base(global::ERES.Net.Properties.Settings.Default.EresConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EresDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EresDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EresDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EresDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<GradeValue> GradeValues
		{
			get
			{
				return this.GetTable<GradeValue>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Realisation> Realisations
		{
			get
			{
				return this.GetTable<Realisation>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Semester> Semesters
		{
			get
			{
				return this.GetTable<Semester>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grades")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeID;
		
		private int _RealisationID;
		
		private string _Name;
		
		private string _MaxValue;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<GradeValue> _GradeValues;
		
		private EntityRef<Realisation> _Realisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnRealisationIDChanging(int value);
    partial void OnRealisationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMaxValueChanging(string value);
    partial void OnMaxValueChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Grade()
		{
			this._GradeValues = new EntitySet<GradeValue>(new Action<GradeValue>(this.attach_GradeValues), new Action<GradeValue>(this.detach_GradeValues));
			this._Realisation = default(EntityRef<Realisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealisationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RealisationID
		{
			get
			{
				return this._RealisationID;
			}
			set
			{
				if ((this._RealisationID != value))
				{
					if (this._Realisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealisationIDChanging(value);
					this.SendPropertyChanging();
					this._RealisationID = value;
					this.SendPropertyChanged("RealisationID");
					this.OnRealisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="NVarChar(64) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_GradeValue", Storage="_GradeValues", ThisKey="GradeID", OtherKey="GradeID")]
		public EntitySet<GradeValue> GradeValues
		{
			get
			{
				return this._GradeValues;
			}
			set
			{
				this._GradeValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Realisation_Grade", Storage="_Realisation", ThisKey="RealisationID", OtherKey="RealisationID", IsForeignKey=true)]
		public Realisation Realisation
		{
			get
			{
				return this._Realisation.Entity;
			}
			set
			{
				Realisation previousValue = this._Realisation.Entity;
				if (((previousValue != value) 
							|| (this._Realisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Realisation.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._Realisation.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._RealisationID = value.RealisationID;
					}
					else
					{
						this._RealisationID = default(int);
					}
					this.SendPropertyChanged("Realisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GradeValues(GradeValue entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_GradeValues(GradeValue entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GradeValues")]
	public partial class GradeValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeValueID;
		
		private int _GradeID;
		
		private int _RegistrationID;
		
		private string _Value;
		
		private string _Date;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Registration> _Registration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeValueIDChanging(int value);
    partial void OnGradeValueIDChanged();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public GradeValue()
		{
			this._Grade = default(EntityRef<Grade>);
			this._Registration = default(EntityRef<Registration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeValueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int GradeValueID
		{
			get
			{
				return this._GradeValueID;
			}
			set
			{
				if ((this._GradeValueID != value))
				{
					this.OnGradeValueIDChanging(value);
					this.SendPropertyChanging();
					this._GradeValueID = value;
					this.SendPropertyChanged("GradeValueID");
					this.OnGradeValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					if (this._Registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_GradeValue", Storage="_Grade", ThisKey="GradeID", OtherKey="GradeID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.GradeValues.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.GradeValues.Add(this);
						this._GradeID = value.GradeID;
					}
					else
					{
						this._GradeID = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_GradeValue", Storage="_Registration", ThisKey="RegistrationID", OtherKey="RegistrationID", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.GradeValues.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.GradeValues.Add(this);
						this._RegistrationID = value.RegistrationID;
					}
					else
					{
						this._RegistrationID = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _Name;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Group()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Students", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Realisations")]
	public partial class Realisation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RealisationID;
		
		private int _SubjectID;
		
		private int _SemesterID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Grade> _Grades;
		
		private EntitySet<Registration> _Registrations;
		
		private EntityRef<Semester> _Semester;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRealisationIDChanging(int value);
    partial void OnRealisationIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Realisation()
		{
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Semester = default(EntityRef<Semester>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealisationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RealisationID
		{
			get
			{
				return this._RealisationID;
			}
			set
			{
				if ((this._RealisationID != value))
				{
					this.OnRealisationIDChanging(value);
					this.SendPropertyChanging();
					this._RealisationID = value;
					this.SendPropertyChanged("RealisationID");
					this.OnRealisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SemesterID
		{
			get
			{
				return this._SemesterID;
			}
			set
			{
				if ((this._SemesterID != value))
				{
					if (this._Semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterIDChanging(value);
					this.SendPropertyChanging();
					this._SemesterID = value;
					this.SendPropertyChanged("SemesterID");
					this.OnSemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Realisation_Grade", Storage="_Grades", ThisKey="RealisationID", OtherKey="RealisationID")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Realisation_Registration", Storage="_Registrations", ThisKey="RealisationID", OtherKey="RealisationID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Realisation", Storage="_Semester", ThisKey="SemesterID", OtherKey="SemesterID", IsForeignKey=true)]
		public Semester Semester
		{
			get
			{
				return this._Semester.Entity;
			}
			set
			{
				Semester previousValue = this._Semester.Entity;
				if (((previousValue != value) 
							|| (this._Semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester.Entity = null;
						previousValue.Realisations.Remove(this);
					}
					this._Semester.Entity = value;
					if ((value != null))
					{
						value.Realisations.Add(this);
						this._SemesterID = value.SemesterID;
					}
					else
					{
						this._SemesterID = default(int);
					}
					this.SendPropertyChanged("Semester");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Realisation", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Realisations.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Realisations.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Realisation = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Realisation = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Realisation = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Realisation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registrations")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegistrationID;
		
		private int _StudentID;
		
		private int _RealisationID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<GradeValue> _GradeValues;
		
		private EntityRef<Realisation> _Realisation;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnRealisationIDChanging(int value);
    partial void OnRealisationIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Registration()
		{
			this._GradeValues = new EntitySet<GradeValue>(new Action<GradeValue>(this.attach_GradeValues), new Action<GradeValue>(this.detach_GradeValues));
			this._Realisation = default(EntityRef<Realisation>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealisationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RealisationID
		{
			get
			{
				return this._RealisationID;
			}
			set
			{
				if ((this._RealisationID != value))
				{
					if (this._Realisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealisationIDChanging(value);
					this.SendPropertyChanging();
					this._RealisationID = value;
					this.SendPropertyChanged("RealisationID");
					this.OnRealisationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_GradeValue", Storage="_GradeValues", ThisKey="RegistrationID", OtherKey="RegistrationID")]
		public EntitySet<GradeValue> GradeValues
		{
			get
			{
				return this._GradeValues;
			}
			set
			{
				this._GradeValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Realisation_Registration", Storage="_Realisation", ThisKey="RealisationID", OtherKey="RealisationID", IsForeignKey=true)]
		public Realisation Realisation
		{
			get
			{
				return this._Realisation.Entity;
			}
			set
			{
				Realisation previousValue = this._Realisation.Entity;
				if (((previousValue != value) 
							|| (this._Realisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Realisation.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Realisation.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._RealisationID = value.RealisationID;
					}
					else
					{
						this._RealisationID = default(int);
					}
					this.SendPropertyChanged("Realisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Registration", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GradeValues(GradeValue entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_GradeValues(GradeValue entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semesters")]
	public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SemesterID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Realisation> _Realisations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Semester()
		{
			this._Realisations = new EntitySet<Realisation>(new Action<Realisation>(this.attach_Realisations), new Action<Realisation>(this.detach_Realisations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int SemesterID
		{
			get
			{
				return this._SemesterID;
			}
			set
			{
				if ((this._SemesterID != value))
				{
					this.OnSemesterIDChanging(value);
					this.SendPropertyChanging();
					this._SemesterID = value;
					this.SendPropertyChanged("SemesterID");
					this.OnSemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Realisation", Storage="_Realisations", ThisKey="SemesterID", OtherKey="SemesterID")]
		public EntitySet<Realisation> Realisations
		{
			get
			{
				return this._Realisations;
			}
			set
			{
				this._Realisations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Realisations(Realisation entity)
		{
			this.SendPropertyChanging();
			entity.Semester = this;
		}
		
		private void detach_Realisations(Realisation entity)
		{
			this.SendPropertyChanging();
			entity.Semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _GroupID;
		
		private string _IndexNo;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Registration> _Registrations;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnIndexNoChanging(string value);
    partial void OnIndexNoChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Student()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexNo", DbType="Char(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IndexNo
		{
			get
			{
				return this._IndexNo;
			}
			set
			{
				if ((this._IndexNo != value))
				{
					this.OnIndexNoChanging(value);
					this.SendPropertyChanging();
					this._IndexNo = value;
					this.SendPropertyChanged("IndexNo");
					this.OnIndexNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Registration", Storage="_Registrations", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private string _Name;
		
		private string _Conspect;
		
		private string _url;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Realisation> _Realisations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnConspectChanging(string value);
    partial void OnConspectChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Subject()
		{
			this._Realisations = new EntitySet<Realisation>(new Action<Realisation>(this.attach_Realisations), new Action<Realisation>(this.detach_Realisations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conspect", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Conspect
		{
			get
			{
				return this._Conspect;
			}
			set
			{
				if ((this._Conspect != value))
				{
					this.OnConspectChanging(value);
					this.SendPropertyChanging();
					this._Conspect = value;
					this.SendPropertyChanged("Conspect");
					this.OnConspectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Realisation", Storage="_Realisations", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<Realisation> Realisations
		{
			get
			{
				return this._Realisations;
			}
			set
			{
				this._Realisations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Realisations(Realisation entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Realisations(Realisation entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
}
#pragma warning restore 1591
